<!-- 
 * EPCC Fall Festival Android app
 * This application is designed as a scavenger hunt game to 
 * be deployed and played at the EPCC Fall Festival.
 *
 * File: AndroidManifest.xml
 * Author: Aaron DeWitt

 This is the starting point of Android applications. In comparison to Java programming this
 is the main(). Like in Java where every program needs a main() every Android app needs a
 AndroidManifest.xml file. The manifest file gives all the essential information the app needs
 to run. Also, it does the following:
    1) It identifies the applications package.
    2) It declares the permissions the app will need (a built in security feature of Android).
    3) It describes the components of the app. ie activities, applications, broadcast receivers
       and content providers. Allowing the app to know what the components are and how to launch
       them.
    4) It determines the minimum level of the host API

 For further reading goto: http://developer.android.com/guide/topics/manifest/manifest-intro.html
 -->

<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="edu.epcc.epccfallfestapp"
    android:versionCode="1"
    android:versionName="1.0" >

    <!--
        Here we are declaring the minimum SDK version in the cas of this app we are
        using 12 which is Android 3.1 or also known as Honeycomb.
    -->
    <uses-sdk
        android:minSdkVersion="12"
        android:targetSdkVersion="20" />

    <!--
        The following are the permissions that are needed to run our app. In the Android
         environment there are limitations placed on every application. This allows for a
         higher security level and prohibits data corruption on Android devices. When an
         application needs to get outside it's "box" to use other devices it needs to ask
         permission from the devices owner. These declarations of permissions will allow
         the device to have access to these features, while prompting the user for permission.
    -->
   <!-- <uses-permission android:name="android.permission.CAMERA" /> -->

    <!--
        The application tag, along with the manifest tag, is a required tag. This tag or
        element contains sub-elements that will declare each of the components in the application.
        Examples of this are the activity, service, receiver and provider tags. The application tag
        also has attributes. For example android:icon=@drawable/monster_icon which points the
        application to the app's icon. If android:name="your.Application" is defined then the
        application will use a custom Application class. If not defined, as is the case here, then
        the application will use a generic application class to launch the program in.

        See: http://developer.android.com/guide/topics/manifest/application-element.html
    -->
    <application
        android:allowBackup="true"
        android:icon="@drawable/monster_icon"
        android:label="@string/app_name"
        android:theme="@style/Theme.Holoween" >

        <!--
            An Activity is a single screen with a user interface. Each application can have
            many different combinations of activities, services, broad-cast receiver, or
            content providers. The activities listed below are the activities that our app
            will contain. These activities are our splash screen and our MainActivity which
            is a FragmentActivity that houses our game.

            In the examples below. The splash screen has two intent-filters defined. An
            intent-filter primes the Splash activity to receive some specific intents. The
            combination of the two intent filters defined in Splash are Main and Launcher.
            The ACTION_MAIN intent, which is filtered by the
                <action android:name="android.intent.Main" />
            intent filter, makes this Activity the main entry point for our program. And, the
            CATEGORY_LAUNCHER intent places this entry point in the top-level launcher, which
            allows the user to start the program from touching it in the launcher.

            see:

                http://developer.android.com/reference/android/content/Intent.html
                http://developer.android.com/guide/components/intents-filters.html
        -->
        <activity
            android:name=".Splash"
            android:screenOrientation="portrait"
            android:label="@string/app_name" >
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>

        <activity
            android:name="edu.epcc.epccfallfestapp.MainActivity"
            android:screenOrientation="portrait"/>

    </application>

</manifest>
